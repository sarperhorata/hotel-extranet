name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'
  REDIS_VERSION: '6'

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd app/backend && npm ci
          cd ../frontend && npm ci

      - name: Run ESLint
        run: |
          cd app/backend && npm run lint
          cd ../frontend && npm run lint

      - name: Run TypeScript check
        run: |
          cd app/backend && npm run type-check
          cd ../frontend && npm run type-check

      - name: Run security audit
        run: |
          cd app/backend && npm audit --audit-level=moderate
          cd ../frontend && npm audit --audit-level=moderate

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: hotel_extranet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: cd app/backend && npm ci

      - name: Wait for database
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for database..."
            sleep 2
          done

      - name: Setup test database
        run: |
          cd app/backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/hotel_extranet_test"
          npm run migrate
          npm run seed

      - name: Run unit tests
        run: cd app/backend && npm test
        env:
          DATABASE_URL: "postgresql://postgres:test_password@localhost:5432/hotel_extranet_test"
          REDIS_URL: "redis://localhost:6379"

      - name: Run integration tests
        run: cd app/backend && npm run test:integration
        env:
          DATABASE_URL: "postgresql://postgres:test_password@localhost:5432/hotel_extranet_test"
          REDIS_URL: "redis://localhost:6379"

      - name: Generate test coverage
        run: cd app/backend && npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./app/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: cd app/frontend && npm ci

      - name: Run TypeScript check
        run: cd app/frontend && npm run type-check

      - name: Run ESLint
        run: cd app/frontend && npm run lint

      - name: Run unit tests
        run: cd app/frontend && npm test

      - name: Build frontend
        run: cd app/frontend && npm run build

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./app/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # E2E Testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: hotel_extranet_e2e
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd app/backend && npm ci
          cd ../frontend && npm ci

      - name: Setup test database
        run: |
          cd app/backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/hotel_extranet_e2e"
          npm run migrate
          npm run seed

      - name: Start backend server
        run: |
          cd app/backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/hotel_extranet_e2e"
          export REDIS_URL="redis://localhost:6379"
          npm run build
          npm start &
        env:
          NODE_ENV: test
          PORT: 5000

      - name: Wait for backend
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:5000/api/v1/monitoring/health; do sleep 2; done'

      - name: Build frontend
        run: cd app/frontend && npm run build

      - name: Install Playwright
        run: cd app/frontend && npx playwright install --with-deps

      - name: Run E2E tests
        run: cd app/frontend && npm run test:e2e
        env:
          BASE_URL: http://localhost:5000

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run load tests
        run: |
          cd app/backend
          # Start a test server
          npm run build
          timeout 300 npm start &
          sleep 10

          # Run load tests
          artillery run --config test-load.yml --output test-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: app/backend/test-results.json

  # Docker Build
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app/backend
          file: ./app/backend/Dockerfile
          push: false
          tags: hotel-extranet-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          file: ./app/frontend/Dockerfile
          push: false
          tags: hotel-extranet-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker images
        run: |
          # Test backend image
          docker run --rm hotel-extranet-backend:test npm run test

          # Test frontend build
          docker run --rm -e NODE_ENV=production hotel-extranet-frontend:test npm run build

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, backend-tests, frontend-tests, e2e-tests, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy backend to Railway
        uses: railway/app@v1
        with:
          service: hotel-extranet-backend-staging
          branch: develop

      - name: Deploy frontend to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --dir=app/frontend/dist
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Run staging tests
        run: |
          # Wait for deployment
          sleep 60

          # Run smoke tests
          curl -f https://staging-backend-url.com/api/v1/monitoring/health
          curl -f https://staging-frontend-url.com

      - name: Notify deployment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Staging deployment completed successfully!'
            })

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, backend-tests, frontend-tests, e2e-tests, docker-build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy backend to Render
        uses: render-oss/render-deploy-action@v1
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Deploy frontend to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --dir=app/frontend/dist
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Setup monitoring
        run: |
          # Create UptimeRobot monitors
          curl -X POST https://api.uptimerobot.com/v2/newMonitor \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "api_key=${{ secrets.UPTIMEROBOT_API_KEY }}&format=json&type=1&url=https://production-backend-url.com/api/v1/monitoring/health&friendly_name=Hotel Extranet Backend"

      - name: Run production smoke tests
        run: |
          # Wait for deployment
          sleep 120

          # Comprehensive health checks
          curl -f https://production-backend-url.com/api/v1/monitoring/health
          curl -f https://production-frontend-url.com
          curl -f https://production-backend-url.com/api/v1/performance/system

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸŽ‰ Production deployment completed successfully!'
            })

      - name: Notify team
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            -d '{
              "text": "ðŸš€ Hotel Extranet deployed to production!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Hotel Extranet v${{ github.run_number }}* deployed to production! ðŸŽ‰"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "â€¢ Backend: https://production-backend-url.com\nâ€¢ Frontend: https://production-frontend-url.com\nâ€¢ Commit: ${{ github.sha }}"
                  }
                }
              ]
            }'

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v4
        with:
          languages: javascript, typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v4

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v4

      - name: Run npm audit
        run: |
          cd app/backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high

  # Database Migration Testing
  migration-tests:
    name: Database Migration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: hotel_extranet_migration_test
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: cd app/backend && npm ci

      - name: Test migrations up
        run: |
          cd app/backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/hotel_extranet_migration_test"
          npm run migrate

      - name: Verify database structure
        run: |
          cd app/backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/hotel_extranet_migration_test"
          # Verify all tables exist
          psql $DATABASE_URL -c "\dt" | grep -E "(users|properties|bookings|payments)"

      - name: Test migrations down
        run: |
          cd app/backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/hotel_extranet_migration_test"
          npm run migrate:rollback

      - name: Verify rollback
        run: |
          cd app/backend
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/hotel_extranet_migration_test"
          # Verify tables are dropped
          psql $DATABASE_URL -c "\dt" | wc -l | grep "^0$"
