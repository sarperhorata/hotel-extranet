version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hotel-extranet-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: hotel_extranet
      POSTGRES_USER: hotel_user
      POSTGRES_PASSWORD: hotel_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hotel_user -d hotel_extranet"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    container_name: hotel-extranet-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://hotel_user:hotel_password@postgres:5432/hotel_extranet
      JWT_SECRET: development-jwt-secret-key
      JWT_REFRESH_SECRET: development-jwt-refresh-secret
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      RESEND_API_KEY: ${RESEND_API_KEY:-test-key}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@local.com}
      FRONTEND_URL: http://localhost:5173
      CORS_ORIGIN: http://localhost:5173
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./app/backend:/app
      - /app/node_modules
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    container_name: hotel-extranet-frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:5000/api/v1
      VITE_WS_URL: ws://localhost:5000
    volumes:
      - ./app/frontend:/app
      - /app/node_modules
    command: npm run dev
    profiles:
      - full

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: hotel-extranet-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Nginx (reverse proxy and load balancer)
  nginx:
    image: nginx:alpine
    container_name: hotel-extranet-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    profiles:
      - full

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: hotel-extranet-network
